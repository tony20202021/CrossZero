unit Common.Constants;

interface

const
  __MIN_Y = 1;
  __MAX_Y = 3;

  __MIN_X = 1;
  __MAX_X = 3;

  __COUNT_MOVES_IN_PARTY_MAX = 10;

//  __BAD_MAX = -999999;
//  __GOOD_MOVE_ONE   = -9999999;
  __GOOD_TEMPLATE     = +1;
//  __GOOD_EMPTY        = +100;
//  __GOOD_ALL_EMPTY    = +10;
  __GOOD_2_IN_LINE     = +10;
  __GOOD_NOT_LOST      = +100;
  __GOOD_WIN           = +1000;
  __LEN_TEMPLATE_EMPTY =  Int64(10000);
  __LEN_TEMPLATE_MY    =  Int64(10000);
  __LEN_TEMPLATE_ENEMY =  Int64(10000);
  __LEN_RANDOM         =  Int64( 1000);
  __LEN_AVG            =  Int64(10000);

  __GOOD_TEMPLATE_ONE   = +1;
  __GOOD_TEMPLATE_ALL   = +1000;

const
  __WEIGHT_TRESHOLD = 0.9;

const
  __WIN_LIMITS_NOT_GROW_COUNT_MAX = 100;

  __POPULATION_COUNT_ARRAY     = 5000;

  __GENERATORS_COUNT     = 1;
  __PRE_CANDIDATES_COUNT = 1;
  __CANDIDATES_COUNT     = 1;
  __MASTER_COUNT         = 1;

  __POPULATION_COUNT_GENERATOR         = 100;
  __POPULATION_COUNT_PRE_CANDIDATE_MIN = 100;   __POPULATION_COUNT_PRE_CANDIDATE_MAX = 200;
  __POPULATION_COUNT_CANDIDATE_MIN     = 300;   __POPULATION_COUNT_CANDIDATE_MAX     = 400;
                                                __POPULATION_COUNT_MASTER            = 500;

  __REPEAT_GENERATOR         = 100;
  __REPEAT_PRE_CANDIDATE_MIN = 200;   __REPEAT_PRE_CANDIDATE_MAX =  300;
  __REPEAT_CANDIDATE_MIN     = 300;   __REPEAT_CANDIDATE_MAX     =  400;
                                      __REPEAT_MASTER            =  500;

  __GENERATION_COUNT = 100000000;

  __PARTIES_COUNT_MIN = 50;
  __PARTIES_COUNT_MAX = 200;

  __PARTIES_COUNT_EVALUATE = 1000;

  __NEW_WINNER_MIN_COPY               = 0.1;     __NEW_WINNER_MAX_COPY               = 0.1;      __NEW_WINNER_MASTER_COPY               = 0.1;
  __NEW_WINNER_MIN_REPRODUCE          = 0.001;   __NEW_WINNER_MAX_REPRODUCE          = 0.4;      __NEW_WINNER_MASTER_REPRODUCE          = 0.07;
  __NEW_WINNER_MIN_MUTATE_ADD_LEVEL   = 0.0;     __NEW_WINNER_MAX_MUTATE_ADD_LEVEL   = 0.0;      __NEW_WINNER_MASTER_MUTATE_ADD_LEVEL   = 0.0;
  __NEW_WINNER_MIN_MUTATE_FEW_LOW     = 0.001;   __NEW_WINNER_MAX_MUTATE_FEW_LOW     = 0.4;      __NEW_WINNER_MASTER_MUTATE_FEW_LOW     = 0.4;
  __NEW_WINNER_MIN_MUTATE_FEW_HIGH    = 0.001;   __NEW_WINNER_MAX_MUTATE_FEW_HIGH    = 0.1;      __NEW_WINNER_MASTER_MUTATE_FEW_HIGH    = 0.01;
  __NEW_WINNER_MIN_MUTATE_MANY_LOW    = 0.001;   __NEW_WINNER_MAX_MUTATE_MANY_LOW    = 0.4;      __NEW_WINNER_MASTER_MUTATE_MANY_LOW    = 0.4;
  __NEW_WINNER_MIN_MUTATE_MANY_HIGH   = 0.001;   __NEW_WINNER_MAX_MUTATE_MANY_HIGH   = 0.1;      __NEW_WINNER_MASTER_MUTATE_MANY_HIGH   = 0.01;
  __NEW_RANDOM = 0.1;
  __NEW_MUTATE_ADD_NEURON  = 0.3;
  __NEW_MUTATE_DELETE_NEURON  = 0.5;
  __ADD_DELETE_NEURON_COUNT_LIMIT  = 0.9;

  __NEW_WINNER_MUTATE_FEW  = 0.01;
  __NEW_WINNER_MUTATE_MANY = 0.90;
  __NEW_WINNER_MUTATE_LOW  = 0.01;
  __NEW_WINNER_MUTATE_HIGH = 0.90;

const
  __MAX_RANDOM = 10000;
  __USE_RANDOM_1 = True;
  __ROUND_DELTA = 0.000001;

  __LEARN_RATE = 0.001;

  __NORMALIZATION_VALUE = 2;
  __USE_NORMALIZATION =
      True
//    False
    ;

  __GENETIC = TRUE;
  __BACK_PROPAGATION = FALSE;
  __COUNT_INPUT_NEURONS_18 = 18;
  __COUNT_OUTPUT_NEURONS = 9;

//  __GENETIC = FALSE;
//  __BACK_PROPAGATION = TRUE;
//  __COUNT_OUTPUT_NEURONS = 2;
//  __COUNT_INPUT_NEURONS_18 = 2;

  __COUNT_INPUT_NEURONS_9 = 9;

  __COUNT_INPUT_NEURONS = __COUNT_INPUT_NEURONS_18;


  __COUNT_MIN_DELETE_NEURON = 3;

  __DEFAULT_COUNT_HIDDEN_LAYERS = 1;
  __DEFAULT_COUNT_HIDDEN_NEURONS = 2;

const
  __TRUNC_PRECISION = 10000;
  __ROUND_PRECISION = -6;

  __WEIGHT_DELTA = 0.00000001;
  __THRESHOLD_MIN_DELTA = 0.00000001;
  __THRESHOLD_MAX_1 =
    True
//    False
    ;

  __SKIP_LIMIT = 0.9;
  __WINNER_RESTORE_LIMIT = 0.8;

implementation

end.
